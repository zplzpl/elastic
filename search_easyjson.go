// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package elastic

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD4176298DecodeGithubComZplzplElastic(in *jlexer.Lexer, out *SearchSuggestionOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "_index":
			out.Index = string(in.String())
		case "_type":
			out.Type = string(in.String())
		case "_id":
			out.Id = string(in.String())
		case "score":
			out.Score = float64(in.Float64())
		case "highlighted":
			out.Highlighted = string(in.String())
		case "collate_match":
			out.CollateMatch = bool(in.Bool())
		case "_source":
			if in.IsNull() {
				in.Skip()
				out.Source = nil
			} else {
				if out.Source == nil {
					out.Source = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Source).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeGithubComZplzplElastic(out *jwriter.Writer, in SearchSuggestionOption) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"text\":")
	out.String(string(in.Text))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"_index\":")
	out.String(string(in.Index))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"_type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"_id\":")
	out.String(string(in.Id))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"score\":")
	out.Float64(float64(in.Score))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"highlighted\":")
	out.String(string(in.Highlighted))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"collate_match\":")
	out.Bool(bool(in.CollateMatch))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"_source\":")
	if in.Source == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.Source).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchSuggestionOption) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeGithubComZplzplElastic(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchSuggestionOption) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeGithubComZplzplElastic(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchSuggestionOption) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeGithubComZplzplElastic(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchSuggestionOption) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeGithubComZplzplElastic(l, v)
}
func easyjsonD4176298DecodeGithubComZplzplElastic1(in *jlexer.Lexer, out *SearchSuggestion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "offset":
			out.Offset = int(in.Int())
		case "length":
			out.Length = int(in.Int())
		case "options":
			if in.IsNull() {
				in.Skip()
				out.Options = nil
			} else {
				in.Delim('[')
				if out.Options == nil {
					if !in.IsDelim(']') {
						out.Options = make([]SearchSuggestionOption, 0, 1)
					} else {
						out.Options = []SearchSuggestionOption{}
					}
				} else {
					out.Options = (out.Options)[:0]
				}
				for !in.IsDelim(']') {
					var v1 SearchSuggestionOption
					(v1).UnmarshalEasyJSON(in)
					out.Options = append(out.Options, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeGithubComZplzplElastic1(out *jwriter.Writer, in SearchSuggestion) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"text\":")
	out.String(string(in.Text))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"offset\":")
	out.Int(int(in.Offset))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"length\":")
	out.Int(int(in.Length))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"options\":")
	if in.Options == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Options {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchSuggestion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeGithubComZplzplElastic1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchSuggestion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeGithubComZplzplElastic1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchSuggestion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeGithubComZplzplElastic1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchSuggestion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeGithubComZplzplElastic1(l, v)
}
func easyjsonD4176298DecodeGithubComZplzplElastic2(in *jlexer.Lexer, out *SearchService) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeGithubComZplzplElastic2(out *jwriter.Writer, in SearchService) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchService) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeGithubComZplzplElastic2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchService) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeGithubComZplzplElastic2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchService) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeGithubComZplzplElastic2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchService) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeGithubComZplzplElastic2(l, v)
}
func easyjsonD4176298DecodeGithubComZplzplElastic3(in *jlexer.Lexer, out *SearchResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "took":
			out.TookInMillis = int64(in.Int64())
		case "_scroll_id":
			out.ScrollId = string(in.String())
		case "hits":
			if in.IsNull() {
				in.Skip()
				out.Hits = nil
			} else {
				if out.Hits == nil {
					out.Hits = new(SearchHits)
				}
				(*out.Hits).UnmarshalEasyJSON(in)
			}
		case "suggest":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Suggest = make(SearchSuggest)
				} else {
					out.Suggest = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 []SearchSuggestion
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						in.Delim('[')
						if v4 == nil {
							if !in.IsDelim(']') {
								v4 = make([]SearchSuggestion, 0, 1)
							} else {
								v4 = []SearchSuggestion{}
							}
						} else {
							v4 = (v4)[:0]
						}
						for !in.IsDelim(']') {
							var v5 SearchSuggestion
							(v5).UnmarshalEasyJSON(in)
							v4 = append(v4, v5)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Suggest)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "aggregations":
			if in.IsNull() {
				in.Skip()
				out.Aggregations = nil
			} else {
				if out.Aggregations == nil {
					out.Aggregations = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Aggregations).UnmarshalJSON(data))
				}
			}
		case "timed_out":
			out.TimedOut = bool(in.Bool())
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(ErrorDetails)
				}
				easyjsonD4176298DecodeGithubComZplzplElastic4(in, &*out.Error)
			}
		case "profile":
			if in.IsNull() {
				in.Skip()
				out.Profile = nil
			} else {
				if out.Profile == nil {
					out.Profile = new(SearchProfile)
				}
				(*out.Profile).UnmarshalEasyJSON(in)
			}
		case "_shards":
			if in.IsNull() {
				in.Skip()
				out.Shards = nil
			} else {
				if out.Shards == nil {
					out.Shards = new(shardsInfo)
				}
				easyjsonD4176298DecodeGithubComZplzplElastic5(in, &*out.Shards)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeGithubComZplzplElastic3(out *jwriter.Writer, in SearchResult) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"took\":")
	out.Int64(int64(in.TookInMillis))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"_scroll_id\":")
	out.String(string(in.ScrollId))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hits\":")
	if in.Hits == nil {
		out.RawString("null")
	} else {
		(*in.Hits).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"suggest\":")
	if in.Suggest == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v6First := true
		for v6Name, v6Value := range in.Suggest {
			if !v6First {
				out.RawByte(',')
			}
			v6First = false
			out.String(string(v6Name))
			out.RawByte(':')
			if v6Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v7, v8 := range v6Value {
					if v7 > 0 {
						out.RawByte(',')
					}
					(v8).MarshalEasyJSON(out)
				}
				out.RawByte(']')
			}
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"aggregations\":")
	if in.Aggregations == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.Aggregations).MarshalJSON())
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"timed_out\":")
	out.Bool(bool(in.TimedOut))
	if in.Error != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"error\":")
		if in.Error == nil {
			out.RawString("null")
		} else {
			easyjsonD4176298EncodeGithubComZplzplElastic4(out, *in.Error)
		}
	}
	if in.Profile != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"profile\":")
		if in.Profile == nil {
			out.RawString("null")
		} else {
			(*in.Profile).MarshalEasyJSON(out)
		}
	}
	if in.Shards != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"_shards\":")
		if in.Shards == nil {
			out.RawString("null")
		} else {
			easyjsonD4176298EncodeGithubComZplzplElastic5(out, *in.Shards)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeGithubComZplzplElastic3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeGithubComZplzplElastic3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeGithubComZplzplElastic3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeGithubComZplzplElastic3(l, v)
}
func easyjsonD4176298DecodeGithubComZplzplElastic5(in *jlexer.Lexer, out *shardsInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = int(in.Int())
		case "successful":
			out.Successful = int(in.Int())
		case "failed":
			out.Failed = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeGithubComZplzplElastic5(out *jwriter.Writer, in shardsInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"total\":")
	out.Int(int(in.Total))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"successful\":")
	out.Int(int(in.Successful))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"failed\":")
	out.Int(int(in.Failed))
	out.RawByte('}')
}
func easyjsonD4176298DecodeGithubComZplzplElastic4(in *jlexer.Lexer, out *ErrorDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		case "resource.type":
			out.ResourceType = string(in.String())
		case "resource.id":
			out.ResourceId = string(in.String())
		case "index":
			out.Index = string(in.String())
		case "phase":
			out.Phase = string(in.String())
		case "grouped":
			out.Grouped = bool(in.Bool())
		case "caused_by":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.CausedBy = make(map[string]interface{})
				} else {
					out.CausedBy = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 interface{}
					if m, ok := v9.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v9.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v9 = in.Interface()
					}
					(out.CausedBy)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		case "root_cause":
			if in.IsNull() {
				in.Skip()
				out.RootCause = nil
			} else {
				in.Delim('[')
				if out.RootCause == nil {
					if !in.IsDelim(']') {
						out.RootCause = make([]*ErrorDetails, 0, 8)
					} else {
						out.RootCause = []*ErrorDetails{}
					}
				} else {
					out.RootCause = (out.RootCause)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *ErrorDetails
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(ErrorDetails)
						}
						easyjsonD4176298DecodeGithubComZplzplElastic4(in, &*v10)
					}
					out.RootCause = append(out.RootCause, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "failed_shards":
			if in.IsNull() {
				in.Skip()
				out.FailedShards = nil
			} else {
				in.Delim('[')
				if out.FailedShards == nil {
					if !in.IsDelim(']') {
						out.FailedShards = make([]map[string]interface{}, 0, 8)
					} else {
						out.FailedShards = []map[string]interface{}{}
					}
				} else {
					out.FailedShards = (out.FailedShards)[:0]
				}
				for !in.IsDelim(']') {
					var v11 map[string]interface{}
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v11 = make(map[string]interface{})
						} else {
							v11 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v12 interface{}
							if m, ok := v12.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v12.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v12 = in.Interface()
							}
							(v11)[key] = v12
							in.WantComma()
						}
						in.Delim('}')
					}
					out.FailedShards = append(out.FailedShards, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeGithubComZplzplElastic4(out *jwriter.Writer, in ErrorDetails) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"reason\":")
	out.String(string(in.Reason))
	if in.ResourceType != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"resource.type\":")
		out.String(string(in.ResourceType))
	}
	if in.ResourceId != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"resource.id\":")
		out.String(string(in.ResourceId))
	}
	if in.Index != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"index\":")
		out.String(string(in.Index))
	}
	if in.Phase != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"phase\":")
		out.String(string(in.Phase))
	}
	if in.Grouped {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"grouped\":")
		out.Bool(bool(in.Grouped))
	}
	if len(in.CausedBy) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caused_by\":")
		if in.CausedBy == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.CausedBy {
				if !v13First {
					out.RawByte(',')
				}
				v13First = false
				out.String(string(v13Name))
				out.RawByte(':')
				if m, ok := v13Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v13Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v13Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.RootCause) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"root_cause\":")
		if in.RootCause == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.RootCause {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					easyjsonD4176298EncodeGithubComZplzplElastic4(out, *v15)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.FailedShards) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"failed_shards\":")
		if in.FailedShards == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.FailedShards {
				if v16 > 0 {
					out.RawByte(',')
				}
				if v17 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v18First := true
					for v18Name, v18Value := range v17 {
						if !v18First {
							out.RawByte(',')
						}
						v18First = false
						out.String(string(v18Name))
						out.RawByte(':')
						if m, ok := v18Value.(easyjson.Marshaler); ok {
							m.MarshalEasyJSON(out)
						} else if m, ok := v18Value.(json.Marshaler); ok {
							out.Raw(m.MarshalJSON())
						} else {
							out.Raw(json.Marshal(v18Value))
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonD4176298DecodeGithubComZplzplElastic6(in *jlexer.Lexer, out *SearchProfileShardResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "searches":
			if in.IsNull() {
				in.Skip()
				out.Searches = nil
			} else {
				in.Delim('[')
				if out.Searches == nil {
					if !in.IsDelim(']') {
						out.Searches = make([]QueryProfileShardResult, 0, 1)
					} else {
						out.Searches = []QueryProfileShardResult{}
					}
				} else {
					out.Searches = (out.Searches)[:0]
				}
				for !in.IsDelim(']') {
					var v19 QueryProfileShardResult
					(v19).UnmarshalEasyJSON(in)
					out.Searches = append(out.Searches, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "aggregations":
			if in.IsNull() {
				in.Skip()
				out.Aggregations = nil
			} else {
				in.Delim('[')
				if out.Aggregations == nil {
					if !in.IsDelim(']') {
						out.Aggregations = make([]ProfileResult, 0, 1)
					} else {
						out.Aggregations = []ProfileResult{}
					}
				} else {
					out.Aggregations = (out.Aggregations)[:0]
				}
				for !in.IsDelim(']') {
					var v20 ProfileResult
					(v20).UnmarshalEasyJSON(in)
					out.Aggregations = append(out.Aggregations, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeGithubComZplzplElastic6(out *jwriter.Writer, in SearchProfileShardResult) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"searches\":")
	if in.Searches == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v21, v22 := range in.Searches {
			if v21 > 0 {
				out.RawByte(',')
			}
			(v22).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"aggregations\":")
	if in.Aggregations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v23, v24 := range in.Aggregations {
			if v23 > 0 {
				out.RawByte(',')
			}
			(v24).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchProfileShardResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeGithubComZplzplElastic6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchProfileShardResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeGithubComZplzplElastic6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchProfileShardResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeGithubComZplzplElastic6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchProfileShardResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeGithubComZplzplElastic6(l, v)
}
func easyjsonD4176298DecodeGithubComZplzplElastic7(in *jlexer.Lexer, out *SearchProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "shards":
			if in.IsNull() {
				in.Skip()
				out.Shards = nil
			} else {
				in.Delim('[')
				if out.Shards == nil {
					if !in.IsDelim(']') {
						out.Shards = make([]SearchProfileShardResult, 0, 1)
					} else {
						out.Shards = []SearchProfileShardResult{}
					}
				} else {
					out.Shards = (out.Shards)[:0]
				}
				for !in.IsDelim(']') {
					var v25 SearchProfileShardResult
					(v25).UnmarshalEasyJSON(in)
					out.Shards = append(out.Shards, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeGithubComZplzplElastic7(out *jwriter.Writer, in SearchProfile) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"shards\":")
	if in.Shards == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v26, v27 := range in.Shards {
			if v26 > 0 {
				out.RawByte(',')
			}
			(v27).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchProfile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeGithubComZplzplElastic7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchProfile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeGithubComZplzplElastic7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchProfile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeGithubComZplzplElastic7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchProfile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeGithubComZplzplElastic7(l, v)
}
func easyjsonD4176298DecodeGithubComZplzplElastic8(in *jlexer.Lexer, out *SearchHits) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.TotalHits = int64(in.Int64())
		case "max_score":
			if in.IsNull() {
				in.Skip()
				out.MaxScore = nil
			} else {
				if out.MaxScore == nil {
					out.MaxScore = new(float64)
				}
				*out.MaxScore = float64(in.Float64())
			}
		case "hits":
			if in.IsNull() {
				in.Skip()
				out.Hits = nil
			} else {
				in.Delim('[')
				if out.Hits == nil {
					if !in.IsDelim(']') {
						out.Hits = make([]*SearchHit, 0, 8)
					} else {
						out.Hits = []*SearchHit{}
					}
				} else {
					out.Hits = (out.Hits)[:0]
				}
				for !in.IsDelim(']') {
					var v28 *SearchHit
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						if v28 == nil {
							v28 = new(SearchHit)
						}
						(*v28).UnmarshalEasyJSON(in)
					}
					out.Hits = append(out.Hits, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeGithubComZplzplElastic8(out *jwriter.Writer, in SearchHits) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"total\":")
	out.Int64(int64(in.TotalHits))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"max_score\":")
	if in.MaxScore == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.MaxScore))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hits\":")
	if in.Hits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v29, v30 := range in.Hits {
			if v29 > 0 {
				out.RawByte(',')
			}
			if v30 == nil {
				out.RawString("null")
			} else {
				(*v30).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchHits) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeGithubComZplzplElastic8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchHits) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeGithubComZplzplElastic8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchHits) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeGithubComZplzplElastic8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchHits) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeGithubComZplzplElastic8(l, v)
}
func easyjsonD4176298DecodeGithubComZplzplElastic9(in *jlexer.Lexer, out *SearchHitInnerHits) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hits":
			if in.IsNull() {
				in.Skip()
				out.Hits = nil
			} else {
				if out.Hits == nil {
					out.Hits = new(SearchHits)
				}
				(*out.Hits).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeGithubComZplzplElastic9(out *jwriter.Writer, in SearchHitInnerHits) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hits\":")
	if in.Hits == nil {
		out.RawString("null")
	} else {
		(*in.Hits).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchHitInnerHits) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeGithubComZplzplElastic9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchHitInnerHits) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeGithubComZplzplElastic9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchHitInnerHits) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeGithubComZplzplElastic9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchHitInnerHits) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeGithubComZplzplElastic9(l, v)
}
func easyjsonD4176298DecodeGithubComZplzplElastic10(in *jlexer.Lexer, out *SearchHit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_score":
			if in.IsNull() {
				in.Skip()
				out.Score = nil
			} else {
				if out.Score == nil {
					out.Score = new(float64)
				}
				*out.Score = float64(in.Float64())
			}
		case "_index":
			out.Index = string(in.String())
		case "_type":
			out.Type = string(in.String())
		case "_id":
			out.Id = string(in.String())
		case "_uid":
			out.Uid = string(in.String())
		case "_routing":
			out.Routing = string(in.String())
		case "_parent":
			out.Parent = string(in.String())
		case "_version":
			if in.IsNull() {
				in.Skip()
				out.Version = nil
			} else {
				if out.Version == nil {
					out.Version = new(int64)
				}
				*out.Version = int64(in.Int64())
			}
		case "sort":
			if in.IsNull() {
				in.Skip()
				out.Sort = nil
			} else {
				in.Delim('[')
				if out.Sort == nil {
					if !in.IsDelim(']') {
						out.Sort = make([]interface{}, 0, 4)
					} else {
						out.Sort = []interface{}{}
					}
				} else {
					out.Sort = (out.Sort)[:0]
				}
				for !in.IsDelim(']') {
					var v31 interface{}
					if m, ok := v31.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v31.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v31 = in.Interface()
					}
					out.Sort = append(out.Sort, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "highlight":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Highlight = make(SearchHitHighlight)
				} else {
					out.Highlight = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v32 []string
					if in.IsNull() {
						in.Skip()
						v32 = nil
					} else {
						in.Delim('[')
						if v32 == nil {
							if !in.IsDelim(']') {
								v32 = make([]string, 0, 4)
							} else {
								v32 = []string{}
							}
						} else {
							v32 = (v32)[:0]
						}
						for !in.IsDelim(']') {
							var v33 string
							v33 = string(in.String())
							v32 = append(v32, v33)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Highlight)[key] = v32
					in.WantComma()
				}
				in.Delim('}')
			}
		case "_source":
			if in.IsNull() {
				in.Skip()
				out.Source = nil
			} else {
				if out.Source == nil {
					out.Source = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Source).UnmarshalJSON(data))
				}
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Fields = make(map[string]interface{})
				} else {
					out.Fields = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v34 interface{}
					if m, ok := v34.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v34.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v34 = in.Interface()
					}
					(out.Fields)[key] = v34
					in.WantComma()
				}
				in.Delim('}')
			}
		case "_explanation":
			if in.IsNull() {
				in.Skip()
				out.Explanation = nil
			} else {
				if out.Explanation == nil {
					out.Explanation = new(SearchExplanation)
				}
				(*out.Explanation).UnmarshalEasyJSON(in)
			}
		case "matched_queries":
			if in.IsNull() {
				in.Skip()
				out.MatchedQueries = nil
			} else {
				in.Delim('[')
				if out.MatchedQueries == nil {
					if !in.IsDelim(']') {
						out.MatchedQueries = make([]string, 0, 4)
					} else {
						out.MatchedQueries = []string{}
					}
				} else {
					out.MatchedQueries = (out.MatchedQueries)[:0]
				}
				for !in.IsDelim(']') {
					var v35 string
					v35 = string(in.String())
					out.MatchedQueries = append(out.MatchedQueries, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "inner_hits":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.InnerHits = make(map[string]*SearchHitInnerHits)
				} else {
					out.InnerHits = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v36 *SearchHitInnerHits
					if in.IsNull() {
						in.Skip()
						v36 = nil
					} else {
						if v36 == nil {
							v36 = new(SearchHitInnerHits)
						}
						(*v36).UnmarshalEasyJSON(in)
					}
					(out.InnerHits)[key] = v36
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeGithubComZplzplElastic10(out *jwriter.Writer, in SearchHit) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"_score\":")
	if in.Score == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.Score))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"_index\":")
	out.String(string(in.Index))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"_type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"_id\":")
	out.String(string(in.Id))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"_uid\":")
	out.String(string(in.Uid))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"_routing\":")
	out.String(string(in.Routing))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"_parent\":")
	out.String(string(in.Parent))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"_version\":")
	if in.Version == nil {
		out.RawString("null")
	} else {
		out.Int64(int64(*in.Version))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sort\":")
	if in.Sort == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v37, v38 := range in.Sort {
			if v37 > 0 {
				out.RawByte(',')
			}
			if m, ok := v38.(easyjson.Marshaler); ok {
				m.MarshalEasyJSON(out)
			} else if m, ok := v38.(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(v38))
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"highlight\":")
	if in.Highlight == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v39First := true
		for v39Name, v39Value := range in.Highlight {
			if !v39First {
				out.RawByte(',')
			}
			v39First = false
			out.String(string(v39Name))
			out.RawByte(':')
			if v39Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v40, v41 := range v39Value {
					if v40 > 0 {
						out.RawByte(',')
					}
					out.String(string(v41))
				}
				out.RawByte(']')
			}
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"_source\":")
	if in.Source == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.Source).MarshalJSON())
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fields\":")
	if in.Fields == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v42First := true
		for v42Name, v42Value := range in.Fields {
			if !v42First {
				out.RawByte(',')
			}
			v42First = false
			out.String(string(v42Name))
			out.RawByte(':')
			if m, ok := v42Value.(easyjson.Marshaler); ok {
				m.MarshalEasyJSON(out)
			} else if m, ok := v42Value.(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(v42Value))
			}
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"_explanation\":")
	if in.Explanation == nil {
		out.RawString("null")
	} else {
		(*in.Explanation).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"matched_queries\":")
	if in.MatchedQueries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v43, v44 := range in.MatchedQueries {
			if v43 > 0 {
				out.RawByte(',')
			}
			out.String(string(v44))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"inner_hits\":")
	if in.InnerHits == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v45First := true
		for v45Name, v45Value := range in.InnerHits {
			if !v45First {
				out.RawByte(',')
			}
			v45First = false
			out.String(string(v45Name))
			out.RawByte(':')
			if v45Value == nil {
				out.RawString("null")
			} else {
				(*v45Value).MarshalEasyJSON(out)
			}
		}
		out.RawByte('}')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchHit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeGithubComZplzplElastic10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchHit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeGithubComZplzplElastic10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchHit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeGithubComZplzplElastic10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchHit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeGithubComZplzplElastic10(l, v)
}
func easyjsonD4176298DecodeGithubComZplzplElastic11(in *jlexer.Lexer, out *SearchExplanation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = float64(in.Float64())
		case "description":
			out.Description = string(in.String())
		case "details":
			if in.IsNull() {
				in.Skip()
				out.Details = nil
			} else {
				in.Delim('[')
				if out.Details == nil {
					if !in.IsDelim(']') {
						out.Details = make([]SearchExplanation, 0, 1)
					} else {
						out.Details = []SearchExplanation{}
					}
				} else {
					out.Details = (out.Details)[:0]
				}
				for !in.IsDelim(']') {
					var v46 SearchExplanation
					(v46).UnmarshalEasyJSON(in)
					out.Details = append(out.Details, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeGithubComZplzplElastic11(out *jwriter.Writer, in SearchExplanation) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"value\":")
	out.Float64(float64(in.Value))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"description\":")
	out.String(string(in.Description))
	if len(in.Details) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"details\":")
		if in.Details == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Details {
				if v47 > 0 {
					out.RawByte(',')
				}
				(v48).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchExplanation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeGithubComZplzplElastic11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchExplanation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeGithubComZplzplElastic11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchExplanation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeGithubComZplzplElastic11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchExplanation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeGithubComZplzplElastic11(l, v)
}
func easyjsonD4176298DecodeGithubComZplzplElastic12(in *jlexer.Lexer, out *QueryProfileShardResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query":
			if in.IsNull() {
				in.Skip()
				out.Query = nil
			} else {
				in.Delim('[')
				if out.Query == nil {
					if !in.IsDelim(']') {
						out.Query = make([]ProfileResult, 0, 1)
					} else {
						out.Query = []ProfileResult{}
					}
				} else {
					out.Query = (out.Query)[:0]
				}
				for !in.IsDelim(']') {
					var v49 ProfileResult
					(v49).UnmarshalEasyJSON(in)
					out.Query = append(out.Query, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rewrite_time":
			out.RewriteTime = int64(in.Int64())
		case "collector":
			if in.IsNull() {
				in.Skip()
				out.Collector = nil
			} else {
				in.Delim('[')
				if out.Collector == nil {
					if !in.IsDelim(']') {
						out.Collector = make([]interface{}, 0, 4)
					} else {
						out.Collector = []interface{}{}
					}
				} else {
					out.Collector = (out.Collector)[:0]
				}
				for !in.IsDelim(']') {
					var v50 interface{}
					if m, ok := v50.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v50.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v50 = in.Interface()
					}
					out.Collector = append(out.Collector, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeGithubComZplzplElastic12(out *jwriter.Writer, in QueryProfileShardResult) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Query) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"query\":")
		if in.Query == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v51, v52 := range in.Query {
				if v51 > 0 {
					out.RawByte(',')
				}
				(v52).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.RewriteTime != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"rewrite_time\":")
		out.Int64(int64(in.RewriteTime))
	}
	if len(in.Collector) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"collector\":")
		if in.Collector == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Collector {
				if v53 > 0 {
					out.RawByte(',')
				}
				if m, ok := v54.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v54.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v54))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryProfileShardResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeGithubComZplzplElastic12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueryProfileShardResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeGithubComZplzplElastic12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryProfileShardResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeGithubComZplzplElastic12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueryProfileShardResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeGithubComZplzplElastic12(l, v)
}
func easyjsonD4176298DecodeGithubComZplzplElastic13(in *jlexer.Lexer, out *ProfileResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "time":
			out.NodeTime = string(in.String())
		case "time_in_nanos":
			out.NodeTimeNanos = int64(in.Int64())
		case "breakdown":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Breakdown = make(map[string]int64)
				} else {
					out.Breakdown = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v55 int64
					v55 = int64(in.Int64())
					(out.Breakdown)[key] = v55
					in.WantComma()
				}
				in.Delim('}')
			}
		case "children":
			if in.IsNull() {
				in.Skip()
				out.Children = nil
			} else {
				in.Delim('[')
				if out.Children == nil {
					if !in.IsDelim(']') {
						out.Children = make([]ProfileResult, 0, 1)
					} else {
						out.Children = []ProfileResult{}
					}
				} else {
					out.Children = (out.Children)[:0]
				}
				for !in.IsDelim(']') {
					var v56 ProfileResult
					(v56).UnmarshalEasyJSON(in)
					out.Children = append(out.Children, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeGithubComZplzplElastic13(out *jwriter.Writer, in ProfileResult) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if in.Description != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"description\":")
		out.String(string(in.Description))
	}
	if in.NodeTime != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"time\":")
		out.String(string(in.NodeTime))
	}
	if in.NodeTimeNanos != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"time_in_nanos\":")
		out.Int64(int64(in.NodeTimeNanos))
	}
	if len(in.Breakdown) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"breakdown\":")
		if in.Breakdown == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v57First := true
			for v57Name, v57Value := range in.Breakdown {
				if !v57First {
					out.RawByte(',')
				}
				v57First = false
				out.String(string(v57Name))
				out.RawByte(':')
				out.Int64(int64(v57Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Children) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"children\":")
		if in.Children == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v58, v59 := range in.Children {
				if v58 > 0 {
					out.RawByte(',')
				}
				(v59).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeGithubComZplzplElastic13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeGithubComZplzplElastic13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeGithubComZplzplElastic13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeGithubComZplzplElastic13(l, v)
}
func easyjsonD4176298DecodeGithubComZplzplElastic14(in *jlexer.Lexer, out *CollectorResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		case "time":
			out.Time = string(in.String())
		case "time_in_nanos":
			out.TimeNanos = int64(in.Int64())
		case "children":
			if in.IsNull() {
				in.Skip()
				out.Children = nil
			} else {
				in.Delim('[')
				if out.Children == nil {
					if !in.IsDelim(']') {
						out.Children = make([]CollectorResult, 0, 1)
					} else {
						out.Children = []CollectorResult{}
					}
				} else {
					out.Children = (out.Children)[:0]
				}
				for !in.IsDelim(']') {
					var v60 CollectorResult
					(v60).UnmarshalEasyJSON(in)
					out.Children = append(out.Children, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeGithubComZplzplElastic14(out *jwriter.Writer, in CollectorResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Reason != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reason\":")
		out.String(string(in.Reason))
	}
	if in.Time != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"time\":")
		out.String(string(in.Time))
	}
	if in.TimeNanos != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"time_in_nanos\":")
		out.Int64(int64(in.TimeNanos))
	}
	if len(in.Children) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"children\":")
		if in.Children == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v61, v62 := range in.Children {
				if v61 > 0 {
					out.RawByte(',')
				}
				(v62).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CollectorResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeGithubComZplzplElastic14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CollectorResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeGithubComZplzplElastic14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CollectorResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeGithubComZplzplElastic14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CollectorResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeGithubComZplzplElastic14(l, v)
}
